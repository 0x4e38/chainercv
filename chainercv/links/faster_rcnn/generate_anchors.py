import numpy as np
import six


def generate_anchors(base_size=16, ratios=[0.5, 1, 2],
                     scales=[8, 16, 32]):
    """Generate anchor windows by enumerating aspect ratio and scales.

    Generate anchors that are scaled and fit to given aspect ratios.
    Area of a scaled anchor is preserved when fitting to an aspect ratio.

    There will be :obj:`R = len(ratios) * len(scales)` anchors generated.
    The :obj:`i * len(scales) + j` th anchor corresponds to an anchor
    generated by :obj:`ratios[i]` and :obj:`scales[j]`.

    For example, if scale is :math:`8` and ratio is :math:`0.25`,
    width and height of the base window will be stretched by :math:`8` for
    scaling. For fitting the anchor to the given aspect ratio,
    the height is halved and the width is doubled.

    Args:
        base_size (number): Width and height of the reference window.
        ratios (list of floats): Anchors with ratios contained in this list
            will be generated. Ratio is the ratio of the height by the width.
        scales (list of numbers): Values in :obj:`scales` determine area of
            possibly generated anchors. Those areas will be square of an
            element in :obj:`scales` times the original area of the
            reference window.

    Returns:
        ~numpy.ndarray:
        An array of shape :math:`(R, 4)`. The second axis contains four \
        values :obj:`(x_min, y_min, x_max, y_max)`, \
        which are coordinates of the bottom left and the top right vertices.

    """
    scales = np.array(scales)
    base_anchor = np.array([0, 0, base_size, base_size])
    ratio_anchors = _ratio_enum(base_anchor, ratios)
    anchors = np.vstack([_scale_enum(ratio_anchors[i, :], scales)
                         for i in six.moves.range(ratio_anchors.shape[0])])
    return anchors


def _whctrs(anchor):
    # Return width, height, x center, and y center for an anchor (window).

    w = anchor[2] - anchor[0]
    h = anchor[3] - anchor[1]
    x_ctr = anchor[0] + 0.5 * w
    y_ctr = anchor[1] + 0.5 * h
    return w, h, x_ctr, y_ctr


def _mkanchors(ws, hs, x_ctr, y_ctr):
    # Given a vector of widths (ws) and heights (hs) around a center
    # (x_ctr, y_ctr), output a set of anchors (windows).

    ws = ws[:, np.newaxis]
    hs = hs[:, np.newaxis]
    anchors = np.hstack((x_ctr - 0.5 * ws,
                         y_ctr - 0.5 * hs,
                         x_ctr + 0.5 * ws,
                         y_ctr + 0.5 * hs))
    return anchors


def _ratio_enum(anchor, ratios):
    # Enumerate a set of anchors for each aspect ratio wrt an anchor.

    w, h, x_ctr, y_ctr = _whctrs(anchor)
    size = w * h
    size_ratios = size / ratios
    ws = np.round(np.sqrt(size_ratios))
    hs = np.round(ws * ratios)
    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)
    return anchors


def _scale_enum(anchor, scales):
    # Enumerate a set of anchors for each scale wrt an anchor.

    w, h, x_ctr, y_ctr = _whctrs(anchor)
    ws = w * scales
    hs = h * scales
    anchors = _mkanchors(ws, hs, x_ctr, y_ctr)
    return anchors
